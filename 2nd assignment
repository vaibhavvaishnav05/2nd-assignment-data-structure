{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "d2203512-c853-4461-9e7f-1ac1ef469e4f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Discuss string slicing and provide examples.\n",
    "#to obtain sub string we use string slicing .threre are two type of slicing method in buold slicing method and array slicing method.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "944fa5c1-fa4f-46b2-936d-f0631d01c42e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "v\n"
     ]
    }
   ],
   "source": [
    "#example:\n",
    "name=\"vaibhav\"\n",
    "s1=slice(1)\n",
    "s2=slice(2)\n",
    "s3=slice(3)\n",
    "print(name[s1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "b7947583-7a00-49f4-a6cd-4bae881a5b3a",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2:Explain the key features of lists in Python\u0014\n",
    "#the keyfeatures of list is we can store data. we can found data in order,dynamic,Lists can contain any arbitrary objects.List elements can be accessed by index.Lists can be nested to arbitrary depth.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "5e5bbc52-9970-44bf-95d2-6c878e3b2861",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[3, 4, 6, 8687, 'mohan', 'ra']\n",
      "4\n",
      "[3, 'deepak', 6, 8687, 'mohan', 'ra']\n",
      "['deepak', 6, 8687, 'mohan', 'ra']\n"
     ]
    }
   ],
   "source": [
    "#3:Describe how to access modifye and delete elements in a list with examples\n",
    "list=[3,4,6,8687,\"mohan\",'ra']\n",
    "#access\n",
    "print(list)\n",
    "print(list[1])\n",
    "\n",
    "\n",
    "#modify\n",
    "list[1]=\"deepak\"\n",
    "print(list)\n",
    "\n",
    "\n",
    "#delete\n",
    "list.remove(3)\n",
    "print(list)\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "60c9be95-d6ff-42d5-825a-a69eedcb3c39",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[89, 'deepak', 6576, 7898, 'vaibhav', 'krish']\n",
      "(89, 456, 6576, 7898, 'vaibhav', 'krish')\n"
     ]
    },
    {
     "ename": "TypeError",
     "evalue": "'tuple' object does not support item assignment",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[22], line 13\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28mtuple\u001b[39m\u001b[38;5;241m=\u001b[39m(\u001b[38;5;241m89\u001b[39m,\u001b[38;5;241m456\u001b[39m,\u001b[38;5;241m6576\u001b[39m,\u001b[38;5;241m7898\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mvaibhav\u001b[39m\u001b[38;5;124m\"\u001b[39m,\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mkrish\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m     12\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;28mtuple\u001b[39m)\n\u001b[0;32m---> 13\u001b[0m \u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m[\u001b[49m\u001b[38;5;241;43m1\u001b[39;49m\u001b[43m]\u001b[49m\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124msonu\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m     14\u001b[0m \u001b[38;5;28mprint\u001b[39m(\u001b[38;5;28mtuple\u001b[39m)\n",
      "\u001b[0;31mTypeError\u001b[0m: 'tuple' object does not support item assignment"
     ]
    }
   ],
   "source": [
    "#4:Compare and contrast tuples and lists with examples\n",
    "#the compare and contrast between tuple and list is both are use for store data. tuple is immutable and list is immmutable.we can change something in the tuple after accesing but we cant change in list after accesing\n",
    "#code\n",
    "\n",
    "list=[89,456,6576,7898,\"vaibhav\",\"krish\"]\n",
    "\n",
    "list[1]=\"deepak\"\n",
    "print(list)\n",
    "\n",
    "#tuple\n",
    "tuple=(89,456,6576,7898,\"vaibhav\",\"krish\")\n",
    "print(tuple)\n",
    "tuple[1]=\"sonu\"\n",
    "print(tuple)\n",
    "#we cant change\n",
    "#this is uggest differece bt them\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8f19975a-4dfa-43f1-ab1b-0759c2c04ff6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "({3324, 56757, 3654, 'aman', 'dev', 7868, 12}, {121, 34, 45654, 'aman', 'dev', 123, 12})\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{12, 121, 123, 34, 45654, 'aman', 'dev'}"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#5 Describe the key features of sets and provide examples of theeir sets.\n",
    "#the keyfeatures of sets is by the help of it we can find comman elements,store the data.\n",
    "\n",
    "\n",
    "#code\n",
    "set1={12,3324,56757,12,3654,7868,\"aman\",\"dev\"}\n",
    "set2={121,12,34,45654,123,\"aman\",\"dev\"}\n",
    "b=set1,set2\n",
    "print(b)\n",
    "\n",
    "#comman\n",
    "set1&set2\n",
    "\n",
    "#intersection\n",
    "set1 and set2\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "0c149475-5885-4355-b0ef-1529724d16f9",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/IPython/core/inputtransformer2.py:604: UserWarning: `make_tokens_by_line` received a list of lines which do not have lineending markers ('\\n', '\\r', '\\r\\n', '\\x0b', '\\x0c'), behavior will be unspecified\n",
      "  tokens_by_line = make_tokens_by_line(lines)\n"
     ]
    }
   ],
   "source": [
    "#6=\u0014 D\u0015sc\u001e",
    "ss the \u001e",
    "se cases o\u0007 t\u001e",
    "ples and sets \u0015n Python programm\u0015\n",
    "# Tuples are used to store multiple items in a single variable. Tuple is one of 4 built-in data types in Python used to store collections of data, the other 3 are List, Set, and Dictionary, all with different qualities and usage. A tuple is a collection which is ordered and unchangeable.\n",
    "# A common use of sets in Python is computing standard math operations such as union, intersection, difference, and symmetric difference. The image below shows a couple standard math operations on two sets A and B. The red part of each Venn diagram is the resulting set of a given set operation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "9f4334b0-11ef-461c-bdc6-2cfc3ab57e03",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{112, 1, 'jatt', 7658678, 3545, 'sura', 'dev', 890}\n",
      "{'jatt sahab:suraj ', 'madel:2022', 'car:fortuner'}\n",
      "{'jatt sahab:suraj ', 'madel:2022', 'number:2034', 'car:fortuner'}\n",
      "{'name': 'vaibhav', 'place': 'jaipur'}\n"
     ]
    }
   ],
   "source": [
    "#Describe how to add modifying and delete items in a dictionary with examples.\n",
    "\n",
    "#add in dict\n",
    "dict={1,112,3545,7658678,890,\"sura\",\"jatt\"}\n",
    "dict.add(\"dev\")\n",
    "print(dict)\n",
    "     \n",
    "    \n",
    "    #update\n",
    "dict1={\"jatt sahab:suraj \",\n",
    "     \"car:fortuner\",\n",
    "     \"madel:2022\"}\n",
    "print(dict1)\n",
    "dict1.update({\"number:2034\"})\n",
    "print(dict1)\n",
    "\n",
    "#delete\n",
    "dict2={\"name\":\"vaibhav\",\n",
    "      \"class\":\"btech 1 year\",\n",
    "      \"place\":\"jaipur\"}\n",
    "dict2.pop(\"class\")\n",
    "print(dict2)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "9f0def9b-0577-4cfb-805a-42a03776e2b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "# 8 impotamnce of dict keys\n",
    "#The Python dictionary keys() function can be used to access dictionary elements in the same way that we can access list elements; however, without the usage of keys(), no other mechanism provides a way to access dictionary keys as a list by index."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6a2f99f6-9eeb-431d-9bb0-c2b7f1a180f8",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e045ee88-dbf8-4de3-bb5b-62b66b359bc4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2db5dc46-1e97-4bee-a7f3-a48e095dd43c",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
